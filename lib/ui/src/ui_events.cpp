// This file was generated by SquareLine Studio
// SquareLine Studio version: SquareLine Studio 1.5.1
// LVGL version: 8.3.11
// Project name: SquareLine_Project_MusicPlayer

#include "ui.h"
#include <Music.h>
lv_obj_t *ui_list1;
lv_obj_t *ui_list1_btn;
void PauseClicke(lv_event_t *e)
{
	lv_img_set_angle(ui_citou, -200); // 磁头旋转到停止位
	lv_anim_del_all();				  // 删除所有动画
	pause_status = 1;				  // 手动暂停标志位
	Music_Pause();					  // 暂停播放音乐
	lv_label_set_text(ui_Label2, "暂停播放");
}

void PlayClicked(lv_event_t *e)
{
	lv_img_set_angle(ui_citou, map(Music_GetCurrentPlayTime(), 0, duration, 60, -60)); // 设置磁头转动角度
	HaibaoXuanzhuan_Animation(ui_haibao, 0);
	pause_status = 0; // 手动暂停标志位取消
	Music_Play();
	lv_label_set_text(ui_Label2, "正在播放");
}

void NextClicke(lv_event_t *e)
{
	Music_Next();
	if (pause_status) // 如果处于暂停状态，还保存暂停状态，只更新曲目信息
	{
		Music_Pause();
		String fileName = musicFiles[music_i];
		currentTitle = fileName.substring(0, fileName.lastIndexOf("."));
		lv_label_set_text(ui_Label2, "暂停播放");
		lv_label_set_text(ui_MusicTitleLabel, currentTitle.c_str()); //  歌曲名
	}
}

void PlayModeClicked(lv_event_t *e)
{
	switchPlayMode();

	switch (currentPlayMode)
	{
	case SINGLE_LOOP:
		lv_imgbtn_set_src(ui_PlayModeButton, LV_IMGBTN_STATE_RELEASED, NULL, &ui_img_single_loop_png, NULL);
		lv_imgbtn_set_src(ui_PlayModeButton, LV_IMGBTN_STATE_PRESSED, NULL, &ui_img_single_loop_png, NULL);
		lv_label_set_text(ui_Label2, "正在播放/单曲循环");
		break;
	case LIST_LOOP:
		lv_imgbtn_set_src(ui_PlayModeButton, LV_IMGBTN_STATE_RELEASED, NULL, &ui_img_list_loop_png, NULL);
		lv_imgbtn_set_src(ui_PlayModeButton, LV_IMGBTN_STATE_PRESSED, NULL, &ui_img_list_loop_png, NULL);
		lv_label_set_text(ui_Label2, "正在播放/目录循环");
		break;
	case RANDOM_PLAY:
		lv_imgbtn_set_src(ui_PlayModeButton, LV_IMGBTN_STATE_RELEASED, NULL, &ui_img_random_play_png, NULL);
		lv_imgbtn_set_src(ui_PlayModeButton, LV_IMGBTN_STATE_PRESSED, NULL, &ui_img_random_play_png, NULL);
		lv_label_set_text(ui_Label2, "正在播放/随机播放");
		break;

	default:
		break;
	}

	Serial.println(currentPlayMode);
}

void VolumeClicked(lv_event_t *e)
{
	// 1、获取音量值

	// 2、音量值显示到滑块
	lv_slider_set_value(ui_VolumeSlider, getVolume(), LV_ANIM_OFF);
}

void VolumeValueChange(lv_event_t *e)
{
	// 1. 获取事件目标对象（滑块）
	lv_obj_t *slider = lv_event_get_target(e);

	// 2. 获取当前滑块值
	int32_t volume = lv_slider_get_value(slider);
	setVolume(volume);
}

void PrevClicked(lv_event_t *e)
{
	Music_Prev();
	if (pause_status)
	{
		Music_Pause();
		String fileName = musicFiles[music_i];
		currentTitle = fileName.substring(0, fileName.lastIndexOf("."));
		lv_label_set_text(ui_Label2, "暂停播放");
		lv_label_set_text(ui_MusicTitleLabel, currentTitle.c_str()); //  歌曲名
	}
}

/*播放列表曲目点击回调函数；点击曲目后播放列表中的曲目*/
static void ui_event_list1_handler(lv_event_t *e)
{
	lv_event_code_t code = lv_event_get_code(e);
	lv_obj_t *obj = lv_event_get_target(e);

	if (code == LV_EVENT_CLICKED)
	{
		// LV_UNUSED(obj);
		// LV_LOG_USER("Clicked: %s", lv_list_get_button_text(ui_list1, obj));
		const char *rawName = lv_label_get_text(lv_obj_get_child(obj, 0)); // 获取按钮的标签文本
		char path[128];													   // 假设最大路径长度为 128
		snprintf(path, sizeof(path), "%s.mp3", rawName);				   // 构建完整的文件路径
		Music_PlayPath(path);
		music_prev_i = music_i;				   // 保存上一首播放的曲目索引
		for (size_t i = 0; i < fileCount; i++) // 遍历文件列表,获取当前播放的曲目索引
		{
			if (musicFiles[i] == path)
			{
				music_i = i;
			}
		}

		Serial.println(music_prev_i);
		Serial.println(music_i);
		lv_obj_add_flag(ui_caidanPanel, LV_OBJ_FLAG_HIDDEN); // 隐藏菜单面板
		pause_status = 0;									 // 手动暂停标志位取消
	}
}
/*播放列表按钮点击回调函数*/
void PlayListButtonClicked(lv_event_t *e)
{

	lv_label_set_text_fmt(ui_Label1, "播放列表（%d/%d）", music_i + 1, fileCount + 1);
	// 如果列表已经存在，先删除旧列表
	if (ui_list1 != NULL)
	{
		lv_obj_del(ui_list1);
		ui_list1 = NULL; // 清空指针，防止野指针
	}

	// 创建新列表
	ui_list1 = lv_list_create(ui_caidanPanel);
	lv_obj_set_x(ui_list1, 6);
	lv_obj_set_y(ui_list1, 16);
	lv_obj_set_width(ui_list1, 148);
	lv_obj_set_height(ui_list1, 254);
	lv_obj_set_align(ui_list1, LV_ALIGN_CENTER);

	lv_obj_set_style_bg_color(ui_list1, lv_color_hex(0xFFFFFF), LV_PART_MAIN | LV_STATE_DEFAULT);
	lv_obj_set_style_bg_opa(ui_list1, 0, LV_PART_MAIN | LV_STATE_DEFAULT);
	lv_obj_set_style_border_width(ui_list1, 0, LV_PART_MAIN | LV_STATE_DEFAULT);

	// 添加 N 个按钮项
	for (size_t i = 0; i < fileCount; i++)
	{
		/*取消.mp3后缀*/
		String fileName = musicFiles[i];
		int dotIndex = fileName.lastIndexOf(".");
		if (dotIndex != -1)
		{
			fileName = fileName.substring(0, dotIndex);
		}

		ui_list1_btn = lv_list_add_btn(ui_list1, NULL, fileName.c_str());
		// 高亮当前播放的歌曲（例如第6首）
		if (i == music_i)
		{

			lv_obj_set_style_text_color(ui_list1_btn, lv_color_hex(0xff0000), LV_PART_MAIN | LV_STATE_DEFAULT);
		}
		else
		{

			lv_obj_set_style_text_color(ui_list1_btn, lv_color_hex(0xFFFFFF), LV_PART_MAIN | LV_STATE_DEFAULT);
		}
		lv_obj_set_style_bg_opa(ui_list1_btn, 0, LV_PART_MAIN | LV_STATE_DEFAULT);
		lv_obj_set_style_text_font(ui_list1_btn, &ui_font_HONOR_Light12, LV_PART_MAIN | LV_STATE_DEFAULT);
		lv_obj_set_style_text_align(ui_list1_btn, LV_TEXT_ALIGN_LEFT, LV_PART_MAIN);

		// 绑定点击事件
		lv_obj_add_event_cb(ui_list1_btn, ui_event_list1_handler, LV_EVENT_CLICKED, NULL);
	}
}